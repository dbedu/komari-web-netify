name: Build and Release Theme

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'manual'
        type: choice
        options:
          - manual
          - beta
          - stable
  schedule:
    - cron: '0 16 * * *'  # UTC 16:00 = 北京时间 00:00

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify theme metadata
        run: |
          echo "=== Current komari-theme.json content ==="
          cat komari-theme.json
          echo "=================================="
      
      - name: Build project
        run: npm run build
      
      - name: Get version info
        id: version
        run: |
          # Generate version info matching build-theme.sh
          VERSION_DATE=$(date +"%y.%m.%d")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Get tag name if available
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="manual-${VERSION_DATE}"
          fi
          
          echo "version=${VERSION_DATE}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "zip_name=komari-theme-v${VERSION_DATE}-${COMMIT_HASH}.zip" >> $GITHUB_OUTPUT
      
      - name: Verify required files
        run: |
          echo "=== Verifying required files ==="
          
          files_missing=false
          
          if [ ! -f "preview.png" ]; then
            echo "❌ preview.png not found"
            files_missing=true
          else
            echo "✅ preview.png found"
          fi
          
          if [ ! -f "komari-theme.json" ]; then
            echo "❌ komari-theme.json not found"
            files_missing=true
          else
            echo "✅ komari-theme.json found"
          fi
          
          if [ ! -d "dist" ]; then
            echo "❌ dist/ directory not found"
            files_missing=true
          else
            echo "✅ dist/ directory found"
            ls -la dist/
          fi
          
          if [ "$files_missing" = true ]; then
            echo "::error::Some required files are missing"
            exit 1
          fi
      
      - name: Create theme package
        run: |
          echo "=== Creating theme package ==="
          
          # Create temporary directory
          rm -rf theme-package
          mkdir -p theme-package
          
          # Copy required files
          cp preview.png theme-package/
          cp komari-theme.json theme-package/
          cp -r dist/ theme-package/
          
          # Create zip file
          cd theme-package
          zip -r "../${{ steps.version.outputs.zip_name }}" .
          cd ..
          
          # Clean up
          rm -rf theme-package
          
          echo "✅ Created package: ${{ steps.version.outputs.zip_name }}"
          ls -lh "${{ steps.version.outputs.zip_name }}"
      
      - name: Prepare artifact for manual workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "=== Preparing artifact for manual workflow ==="
          
          # Create artifact directory
          mkdir -p artifact-upload
          
          # Extract the theme package to artifact directory
          unzip "${{ steps.version.outputs.zip_name }}" -d artifact-upload/
          
          # List extracted contents
          echo "=== Extracted contents ==="
          find artifact-upload -type f | sort
          
          echo "✅ Artifact prepared for upload"
      
      - name: Generate changelog and contributors
        id: changelog
        run: |
          echo "=== Generating changelog ==="
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "${{ steps.version.outputs.tag }}" ]; then
            echo "Previous tag: $PREV_TAG"
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s by @%an in %h" --no-merges | sed 's/ by @svnmoe/ by @svnmoe/')
          else
            echo "No previous tag found, including last 10 commits"
            CHANGELOG=$(git log -10 --pretty=format:"- %s by @%an in %h" --no-merges | sed 's/ by @svnmoe/ by @svnmoe/')
          fi
          
          # Get new contributors
          echo "=== Checking for new contributors ==="
          NEW_CONTRIBUTORS=""
          
          # Get all authors since the previous tag
          if [ -n "$PREV_TAG" ]; then
            # Get authors in this release
            CURRENT_AUTHORS=$(git log ${PREV_TAG}..HEAD --pretty=format:"%an" --no-merges | sort -u)
            # Get authors before this release
            PREVIOUS_AUTHORS=$(git log ${PREV_TAG} --pretty=format:"%an" --no-merges | sort -u)
            
            # Find new contributors
            while IFS= read -r author; do
              if [ -n "$author" ] && ! echo "$PREVIOUS_AUTHORS" | grep -q "^$author$"; then
                FIRST_COMMIT=$(git log --author="$author" --pretty=format:"%h" --reverse | head -n1)
                NEW_CONTRIBUTORS="${NEW_CONTRIBUTORS}- @${author} made their first contribution in ${FIRST_COMMIT}\n"
              fi
            done <<< "$CURRENT_AUTHORS"
          fi
          
          # Save changelog to file for the release
          echo "$CHANGELOG" > changelog.txt
          
          if [ -n "$NEW_CONTRIBUTORS" ]; then
            echo "" >> changelog.txt
            echo "" >> changelog.txt
            echo "## New Contributors" >> changelog.txt
            echo -e "$NEW_CONTRIBUTORS" >> changelog.txt
          fi
          
          echo "=== Final changelog ==="
          cat changelog.txt
      
      - name: Set Release Tag
        id: set_tag
        run: |
          # 根据不同触发方式设置标签
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # 自动每日构建
            TAG_NAME="auto-release-$(date +%Y%m%d)"
            RELEASE_TYPE="daily"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发
            case "${{ github.event.inputs.release_type }}" in
              "manual")
                TAG_NAME="manual-release-$(date +%Y%m%d-%H%M%S)"
                RELEASE_TYPE="manual"
                ;;
              "beta")
                TAG_NAME="beta-$(date +%Y%m%d-%H%M%S)"
                RELEASE_TYPE="beta"
                ;;
              "stable")
                TAG_NAME="v$(date +%Y.%m.%d)"
                RELEASE_TYPE="stable"
                ;;
            esac
          elif [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 标签推送
            TAG_NAME="${{ github.ref_name }}"
            RELEASE_TYPE="tag"
          fi

          # 检查标签是否存在并添加时间戳
          if [ "$RELEASE_TYPE" != "tag" ] && git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            TAG_NAME="${TAG_NAME}-$(date +%H%M%S)"
          fi

          # 创建并推送标签（除非是已存在的标签推送）
          if [ "$RELEASE_TYPE" != "tag" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi

          # 设置输出和环境变量
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: |
            ${{ env.RELEASE_TYPE == 'daily' && format('Daily Release {0}', env.RELEASE_TAG) ||
                env.RELEASE_TYPE == 'manual' && format('Manual Release {0}', env.RELEASE_TAG) ||
                env.RELEASE_TYPE == 'beta' && format('Beta Release {0}', env.RELEASE_TAG) ||
                format('Release {0}', env.RELEASE_TAG) }}
          body: |
            ## 🎨 Komari Web Mochi Theme Release
            
            **Build Type:** ${{ env.RELEASE_TYPE }}
            **Build Date:** $(date +"%Y-%m-%d %H:%M:%S")
            **Version:** ${{ steps.version.outputs.version }}
            **Commit:** ${{ steps.version.outputs.commit }}
            
            ### 📦 Installation
            1. Download the theme package below
            2. Upload it to your Komari instance
            3. Apply the theme in settings
            
            ### 🔄 What's Changed
            $(cat changelog.txt)
            
            ### 📋 Theme Information
            ```json
            $(cat komari-theme.json)
            ```
          draft: false
          prerelease: ${{ env.RELEASE_TYPE == 'daily' || env.RELEASE_TYPE == 'beta' }}
          files: |
            ${{ steps.version.outputs.zip_name }}
          body_path: changelog.txt

      - name: Upload theme package for manual workflow
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: komari-theme-${{ steps.version.outputs.version }}-${{ steps.version.outputs.commit }}
          path: artifact-upload/
          retention-days: 30
      
      - name: Generate build summary
        run: |
          echo "## 🎨 Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ steps.version.outputs.commit }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | ${{ steps.version.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Package | \`${{ steps.version.outputs.zip_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            echo "### 🚀 Release Status" >> $GITHUB_STEP_SUMMARY
            echo "Release will be created for tag: **${{ github.ref_name }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📦 Manual Build" >> $GITHUB_STEP_SUMMARY
            echo "Theme package created and uploaded as artifacts (retention: 30 days)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Theme Metadata" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat komari-theme.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Theme package created successfully!**" >> $GITHUB_STEP_SUMMARY